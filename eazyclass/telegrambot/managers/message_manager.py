import logging
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, Any

from jsonapi_client.resourceobject import ResourceObject

from telegrambot.cache import CacheRepository

logger = logging.getLogger(__name__)


@dataclass
class Period:
    lesson_number: int
    date: str
    start_time: str
    end_time: str


@dataclass
class Teacher:
    id: int
    full_name: str
    short_name: str


@dataclass
class Lesson:
    period: Period
    group: str
    subgroup: str
    subject: str
    classroom: str
    teacher: Teacher

    def __post_init__(self):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç—ã Period –∏ Teacher
        if isinstance(self.period, dict):
            self.period = Period(**self.period)
        if isinstance(self.teacher, dict):
            self.teacher = Teacher(**self.teacher)

    def format_time(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —É—Ä–æ–∫–∞"""
        return self.period.start_time[:5]  # HH:MM

    def format_subgroup(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
        return f"{self.subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞" if self.subgroup != "0" else None

    def format_for_group(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        lines = [
            f"{self._get_emoji()}  <b>{self.format_time()}</b>   üìç{self.classroom or '-'}",
            f"<b>{self.subject}</b>",
            self.format_subgroup(),
            f"<i>{self.teacher.short_name}</i>" if self.teacher else None
        ]
        return "\n".join(filter(None, lines))

    def format_for_teacher(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        lines = [
            f"{self._get_emoji()}  <b>{self.format_time()}</b>   üìç{self.classroom or '-'}",
            f"<b>{self.subject}</b>",
            self.format_subgroup(),
            f"<i>{self.group}</i>"
        ]
        return "\n".join(filter(None, lines))

    def _get_emoji(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–∞"""
        emoji_map = {
            1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 3: "3Ô∏è‚É£", 4: "4Ô∏è‚É£",
            5: "5Ô∏è‚É£", 6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£"
        }
        return emoji_map.get(self.period.lesson_number, str(self.period.lesson_number))


class ScheduleMessageBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""

    _WEEKDAYS_RU = {
        0: "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö",
        1: "–í–¢–û–†–ù–ò–ö",
        2: "–°–†–ï–î–ê",
        3: "–ß–ï–¢–í–ï–†–ì",
        4: "–ü–Ø–¢–ù–ò–¶–ê",
        5: "–°–£–ë–ë–û–¢–ê",
        6: "–í–û–°–ö–†–ï–°–ï–ù–¨–ï"
    }

    @classmethod
    def _format_date(cls, date_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –î–î.–ú–ú.–ì–ì–ì–ì"""
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        day_name = cls._WEEKDAYS_RU[date_obj.weekday()]
        date_formatted = date_obj.strftime("%d.%m.%Y")
        return f"<b>{day_name}</b> {date_formatted}"

    @classmethod
    def build_schedule(
            cls,
            title: str,
            schedule_data: Dict[str, Any],
            for_teacher: bool = False
    ) -> str:
        """–°—Ç—Ä–æ–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
        if "error" in schedule_data:
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"

        if not schedule_data.get("data"):
            return "üìÖ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"

        message_lines = [f"üóìÔ∏è <b>{title}</b>", ""]

        for day in schedule_data["data"]:
            message_lines.append(cls._format_date(day["date"]))

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã Lesson –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ö
            lessons = [Lesson(**lesson_data) for lesson_data in day["lessons"]]
            formatted_lessons = [
                lesson.format_for_teacher() if for_teacher else lesson.format_for_group()
                for lesson in lessons
            ]

            message_lines.append(f"<blockquote>{'\n\n'.join(formatted_lessons)}</blockquote>")
            message_lines.append("")

        # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        return "\n".join(message_lines[:-1])


class MessageManager:
    WELCOME_NEW = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!üëã\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
    WELCOME_BACK = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! üëã"

    AUTH_MESSAGES = {
        "authenticated": "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ ‚Ü©",
        "failed": "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
    }

    FACULTIES_PROMPT = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:"
    COURSES_PROMPT = "{faculty_title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:"
    GROUPS_PROMPT = "{faculty_title}\n{course_id} –∫—É—Ä—Å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
    GROUP_SELECTED = "–ì—Ä—É–ø–ø–∞: {group_title}"
    ERROR_DEFAULT = "‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    ALPHABET_PROMPT = "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É:"
    TEACHERS_PROMPT = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:"
    TEACHER_SELECTED = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_full_name}"

    def __init__(self, cache_repository: CacheRepository):
        self.cache_repository = cache_repository

    @classmethod
    def get_start_message(cls, user_resource: ResourceObject) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        user_meta = getattr(user_resource, "meta", {})
        created = getattr(user_meta, "created", False)
        nonce_status = getattr(user_meta, "nonceStatus")

        auth_message = cls.AUTH_MESSAGES.get(nonce_status, "")

        if not created and auth_message:
            return auth_message

        name = getattr(user_resource, "first_name", "Anonymous")
        welcome = (
            cls.WELCOME_NEW.format(name=name)
            if created
            else cls.WELCOME_BACK.format(name=name)
        )

        return f"{welcome}\n\n{auth_message}" if auth_message else welcome

    @classmethod
    def get_faculties_message(cls) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞."""
        return cls.FACULTIES_PROMPT

    def get_courses_message(self, faculty_id: str) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞."""
        faculty_title = self.cache_repository.get_faculty(faculty_id).get(
            "title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"
        )
        return self.COURSES_PROMPT.format(faculty_title=faculty_title)

    def get_groups_message(self, faculty_id: str, course_id: str) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –∫—É—Ä—Å–∞."""
        faculty_title = self.cache_repository.get_faculty(faculty_id).get(
            "title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"
        )
        return self.GROUPS_PROMPT.format(
            faculty_title=faculty_title, course_id=course_id
        )

    def get_group_selected_message(self, group: Dict[str, Any]) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
        return self.GROUP_SELECTED.format(group_title=group.get("title", "-"))

    @classmethod
    def get_alphabet_message(cls) -> str:
        return cls.ALPHABET_PROMPT

    @classmethod
    def get_teachers_message(cls, letter: str) -> str:
        return cls.TEACHERS_PROMPT.format(letter=letter)

    def get_teacher_selected_message(self, teacher_data: Dict[str, Any]) -> str:
        return self.TEACHER_SELECTED.format(
            teacher_full_name=teacher_data.get("full_name", "-")
        )

    @classmethod
    def get_error_message(cls) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π '–ù–∞ –≥–ª–∞–≤–Ω—É—é'."""
        return cls.ERROR_DEFAULT

    @staticmethod
    def format_group_schedule(group_title: str, schedule_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        return ScheduleMessageBuilder.build_schedule(group_title, schedule_data)

    @staticmethod
    def format_teacher_schedule(teacher_name: str, schedule_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
        return ScheduleMessageBuilder.build_schedule(teacher_name, schedule_data, for_teacher=True)
