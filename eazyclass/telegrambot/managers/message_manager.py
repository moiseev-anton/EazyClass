import logging
from typing import Dict, Any

from telegrambot.cache import CacheRepository

logger = logging.getLogger(__name__)


class MessageManager:
    WELCOME_NEW = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!üëã\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
    WELCOME_BACK = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! üëã"

    AUTH_MESSAGES = {
        "authenticated": "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ ‚Ü©",
        "failed": "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
    }

    FACULTIES_PROMPT = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:"
    COURSES_PROMPT = "{faculty_title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:"
    GROUPS_PROMPT = "{faculty_title}\n{course_id} –∫—É—Ä—Å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
    GROUP_SELECTED = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: {group_title}\n–°—Å—ã–ª–∫–∞: {group_link}"
    ERROR_DEFAULT = "‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    ALPHABET_PROMPT = "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É:"
    TEACHERS_PROMPT = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:"
    TEACHER_SELECTED = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {teacher_full_name}"

    def __init__(self, cache_repository: CacheRepository):
        self.cache_repository = cache_repository

    @classmethod
    def get_start_message(
        cls, user: Dict[str, Any], created: bool, nonce_status: str | None
    ) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π"""
        auth_message = cls.AUTH_MESSAGES.get(nonce_status, "")

        if not created and auth_message:
            return auth_message

        name = user.get("first_name", "")
        welcome = (
            cls.WELCOME_NEW.format(name=name)
            if created
            else cls.WELCOME_BACK.format(name=name)
        )
        return welcome + (f"\n\n{auth_message}" if auth_message else "")

    @classmethod
    def get_faculties_message(cls) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞."""
        return cls.FACULTIES_PROMPT

    def get_courses_message(self, faculty_id: str) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞."""
        faculty_title = self.cache_repository.get_faculty(faculty_id).get(
            "title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"
        )
        return self.COURSES_PROMPT.format(faculty_title=faculty_title)

    def get_groups_message(self, faculty_id: str, course_id: str) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –∫—É—Ä—Å–∞."""
        faculty_title = self.cache_repository.get_faculty(faculty_id).get(
            "title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"
        )
        return self.GROUPS_PROMPT.format(
            faculty_title=faculty_title, course_id=course_id
        )

    def get_group_selected_message(
        self, faculty_id: str, course_id: str, group_id: str
    ) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
        group = self.cache_repository.get_group(faculty_id, course_id, group_id)
        if not group:
            return "–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        return self.GROUP_SELECTED.format(
            group_title=group.get("title", "-"), group_link=group.get("link", "")
        )

    @classmethod
    def get_alphabet_message(cls) -> str:
        return cls.ALPHABET_PROMPT

    @classmethod
    def get_teachers_message(cls, letter: str) -> str:
        return cls.TEACHERS_PROMPT.format(letter=letter)

    def get_teacher_selected_message(self, letter: str, teacher_id: str) -> str:
        teacher = self.cache_repository.get_teacher(letter, teacher_id)
        if not teacher:
            return "–û—à–∏–±–∫–∞: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        return self.TEACHER_SELECTED.format(
            teacher_full_name=teacher.get("full_name", "-")
        )

    @classmethod
    def get_error_message(cls) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π '–ù–∞ –≥–ª–∞–≤–Ω—É—é'."""
        return cls.ERROR_DEFAULT
