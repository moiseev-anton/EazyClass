import logging

from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import (
    InlineKeyboardBuilder,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from cachetools.func import ttl_cache

from telegrambot.cache import CacheManager
from telegrambot.config import settings

logger = logging.getLogger(__name__)

CACHE_TIMEOUT = 86400  # 24 —á–∞—Å–∞
KEYBOARD_ROW_WIDTH = 4
TEACHER_KEYBOARD_ROW_WIDTH = 2
GROUP_KEYBOARD_ROW_WIDTH = 2
CHAR_KEYBOARD_ROW_WIDTH = 4
FACULTIES_KEYBOARD_ROW_WIDTH = 1


class FacultyCallback(CallbackData, prefix="f"):
    key: str


class CourseCallback(CallbackData, prefix="c"):
    key: str


class GroupCallback(CallbackData, prefix="g"):
    id: str


class AlphabetCallback(CallbackData, prefix="a"):
    letter: str


class TeacherCallback(CallbackData, prefix="t"):
    id: str


class Button:
    _emoji_nums = {
        "0": "0Ô∏è‚É£",
        "1": "1Ô∏è‚É£",
        "2": "2Ô∏è‚É£",
        "3": "3Ô∏è‚É£",
        "4": "4Ô∏è‚É£",
        "5": "5Ô∏è‚É£",
        "6": "6Ô∏è‚É£",
        "7": "7Ô∏è‚É£",
        "8": "8Ô∏è‚É£",
        "9": "9Ô∏è‚É£",
    }

    home = InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main")
    phone = InlineKeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)

    today = InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="schedule_today")
    tomorrow = InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow")
    ahead = InlineKeyboardButton(text="–ü—Ä–µ–¥—Å—Ç–æ—è—â–µ–µ", callback_data="schedule_ahead")
    week = InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="week_schedule")

    subgroup = InlineKeyboardButton(text="–ü–æ–¥–≥—Ä—É–ø–ø–∞", callback_data="choose_subgroup")
    groups = InlineKeyboardButton(text="üéì–ì—Ä—É–ø–ø—ã", callback_data="faculties")
    teachers = InlineKeyboardButton(
        text="üë®‚Äçüè´üë©‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", callback_data="alphabet"
    )
    notifications = InlineKeyboardButton(
        text="üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications"
    )
    site = InlineKeyboardButton(text="üåç–°–∞–π—Ç", url=settings.base_link)

    context_schedule = InlineKeyboardButton(
        text="üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule_context"
    )
    subscribe = InlineKeyboardButton(text="‚≠ê –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe")

    back = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")

    main_menu = [
        [groups, teachers],
        [notifications],
        [site],
    ]

    schedule_menu = [[today, tomorrow], [ahead, week]]

    subscribe_menu = [[subscribe], [home]]

    @classmethod
    def replace_with_emojis(cls, text: str):
        """–ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ —Ü–∏—Ñ—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ —ç–º–æ–¥–∑–∏"""
        return "".join(cls._emoji_nums.get(char, char) for char in text)

    @classmethod
    def course(cls, text: str):
        """–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –∫—É—Ä—Å–∞ —Å —ç–º–æ–¥–∑–∏."""
        return InlineKeyboardButton(
            text=f"\t\t{cls.replace_with_emojis(text)}\t\t",
            callback_data=CourseCallback(key=text).pack(),
        )

    @classmethod
    def letter(cls, text: str):
        """–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –∫—É—Ä—Å–∞ —Å —ç–º–æ–¥–∑–∏."""
        return InlineKeyboardButton(
            text=f"\t\t{text}\t\t", callback_data=AlphabetCallback(letter=text).pack()
        )


class KeyboardManager:
    home = InlineKeyboardMarkup(inline_keyboard=[[Button.home]])
    phone_request = InlineKeyboardMarkup(
        inline_keyboard=[[Button.phone], [Button.home]]
    )
    main_base = InlineKeyboardMarkup(inline_keyboard=Button.main_menu)
    main_teacher = InlineKeyboardMarkup(
        inline_keyboard=(Button.schedule_menu + Button.main_menu)
    )
    main_group = InlineKeyboardMarkup(
        inline_keyboard=(Button.schedule_menu + [[Button.subgroup]] + Button.main_menu)
    )
    subscribe = InlineKeyboardMarkup(inline_keyboard=Button.subscribe_menu)
    extend_subscribe = InlineKeyboardMarkup(
        inline_keyboard=[[Button.context_schedule]] + Button.subscribe_menu
    )

    def __init__(self, cache_manager: CacheManager):
        self.cache_manager = cache_manager

    @ttl_cache(maxsize=1, ttl=60 * 30)
    def get_faculties_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏–∑ –∫—ç—à–∞."""
        builder = InlineKeyboardBuilder()
        for faculty_key, faculty in self.cache_manager.faculties.items():
            builder.button(
                text=faculty.get("short_title", "-"),
                callback_data=FacultyCallback(key=faculty_key).pack(),
            )
        if self.cache_manager.faculties:
            builder.adjust(3)  # # –¥–æ 2 —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
        builder.row(Button.home)
        return builder.as_markup()

    @ttl_cache(maxsize=128, ttl=60 * 10)
    def get_courses_keyboard(self, faculty_id: str) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫—É—Ä—Å–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        """
        builder = InlineKeyboardBuilder()
        courses = self.cache_manager.get_faculty_courses(faculty_id)

        for course_key in courses.keys():
            builder.add(Button.course(course_key))

        builder.row(Button.back, Button.home)
        return builder.as_markup()

    @ttl_cache(maxsize=128, ttl=60 * 10)
    def get_groups_keyboard(self, faculty_id: str, course: str) -> InlineKeyboardMarkup:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –∫—É—Ä—Å–∞."""
        builder = InlineKeyboardBuilder()
        groups = self.cache_manager.get_course(faculty_id, course)

        for group_id, group in groups.items():
            builder.button(
                text=group.get("title", "-"),
                callback_data=GroupCallback(id=group_id).pack(),
            )

        if groups:
            builder.adjust(2)  # –¥–æ 2 –≥—Ä—É–ø–ø –≤ —Å—Ç—Ä–æ–∫–µ

        builder.row(Button.back, Button.home)
        return builder.as_markup()

    @ttl_cache(maxsize=1, ttl=60 * 30)
    def get_alphabet_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—É–∫–≤–∞–º–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏–∑ teachers_cache."""
        builder = InlineKeyboardBuilder()
        letters = self.cache_manager.get_alphabet()

        for letter in letters:
            builder.add(Button.letter(letter))

        if letters:
            builder.adjust(5)  # 5 –±—É–∫–≤ –≤ —Ä—è–¥
        builder.row(Button.home)
        return builder.as_markup()

    @ttl_cache(maxsize=33, ttl=60 * 10)
    def get_teachers_keyboard(self, letter: str) -> InlineKeyboardMarkup:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É—á–∏—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±—É–∫–≤—ã."""
        builder = InlineKeyboardBuilder()
        teachers = self.cache_manager.get_teachers_by_letter(letter)

        for teacher_id, teacher in teachers.items():
            builder.button(
                text=teacher.get("short_name", "-"),
                callback_data=TeacherCallback(id=teacher_id).pack(),
            )

        if teachers:
            if len(teachers) > 10:
                builder.adjust(2)
            else:
                builder.adjust(1)  # 1 —É—á–∏—Ç–µ–ª—å –≤ —Ä—è–¥
        builder.row(Button.back, Button.home)
        return builder.as_markup()
