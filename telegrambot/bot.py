import os
import time
from functools import lru_cache

import telebot
from eazyclass.scheduler.models import Faculty, Group
from django.core.cache import caches
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from .bot_utils import generate_faculty_keyboard, generate_group_keyboard, generate_course_keyboard

KEYBOARD_ROW_LENGTH = 4



API_TOKEN = os.getenv('TELEGRAM_TOKEN')

cache = caches['telegrambot_cache']
bot = telebot.TeleBot(API_TOKEN)

# today = datetime.now().strftime('%d.%m.%Y')
# tomorrow = (datetime.strptime(today, '%d.%m.%Y') + timedelta(days=1)).strftime('%d.%m.%Y')

# # –ö–µ—à –≥—Ä—É–ø–ø—ã, –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)
# user_group_cache = TTLCache(maxsize=100, ttl=3600)


def get_default_group(telegram_id):
    if telegram_id in user_group_cache.keys():
        return user_group_cache[telegram_id]
    else:
        group = get_user_group(telegram_id)
        if group:
            user_group_cache[telegram_id] = group
            return group



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ home
button_home = InlineKeyboardButton(text='üè† –Ω–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='actions')
home_keyboard = InlineKeyboardMarkup()
home_keyboard.add(button_home)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ actions (—Å—Ç–∞—Ä–∞—è)
# button_faculty = InlineKeyboardButton(text='üéì –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É', callback_data='faculty')
# button_set_group = InlineKeyboardButton(text='üéì –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É', callback_data='faculty')
# actions_keyboard = InlineKeyboardMarkup()
# actions_keyboard.add(button_faculty)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É
button_choice_group = InlineKeyboardButton(text='üéì –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É', callback_data='faculty')
choice_keyboard = InlineKeyboardMarkup()
choice_keyboard.add(button_choice_group)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ actions
button_today = InlineKeyboardButton(text=f' –ù–∞ —Å–µ–≥–æ–¥–Ω—è ', callback_data='today')
button_tomorrow = InlineKeyboardButton(text=f' –ù–∞ –∑–∞–≤—Ç—Ä–∞ ', callback_data='tomorrow')
button_week = InlineKeyboardButton(text=f' –ù–∞ –Ω–µ–¥–µ–ª—é ', callback_data='week')
button_change_group = InlineKeyboardButton(text=f' –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='faculty')

actions_keyboard = InlineKeyboardMarkup()
actions_keyboard.add(button_today)
actions_keyboard.add(button_tomorrow)
actions_keyboard.add(button_week)
actions_keyboard.add(button_change_group)


faculty_keyboard = generate_faculty_keyboard()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø–∏—Å—å –≤ –ë–î
    sing_up_user(message.from_user)
    def_group = get_default_group(message.chat.id)
    if def_group:
        bot.send_message(message.chat.id, f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {def_group.title}",
                         reply_markup=actions_keyboard)
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π.",
                         reply_markup=choice_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    try:
        chat_id = call.message.chat.id
        msg_id = call.message.message_id
        if call.data == 'actions':
            # tg_id = call.message.chat.id
            def_group = get_default_group(chat_id)
            if def_group:
                bot.edit_message_text(chat_id=chat_id, message_id=msg_id,
                                      text=f" –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {def_group.title} ", reply_markup=actions_keyboard)
            else:
                bot.edit_message_text(chat_id=chat_id, message_id=msg_id,
                                      text=f" –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É ", reply_markup=choice_keyboard)

        elif call.data == 'faculty':
            bot.edit_message_text(chat_id=chat_id, message_id=msg_id,
                                  text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", reply_markup=faculty_keyboard)

        elif call.data.startswith('f:'):
            _, fac = call.data.split(':')
            bot.edit_message_text(chat_id=chat_id, message_id=msg_id,
                                  text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å", reply_markup=generate_course_keyboard(fac))

        elif call.data.startswith('c:'):
            _, course, fac = call.data.split(':')
            bot.edit_message_text(chat_id=chat_id, message_id=msg_id,
                                  text="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É", reply_markup=generate_group_keyboard(fac, course))

        elif call.data.startswith('g:'):
            _, group_id = call.data.split(':')
            set_default_group(chat_id, group_id)
            user_group_cache.pop(chat_id, None)
            def_group = get_default_group(chat_id)
            bot.edit_message_text(chat_id=chat_id, message_id=msg_id, text=f" –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {def_group.title}",
                                  parse_mode='HTML', reply_markup=actions_keyboard)

        # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        elif call.data.startswith('today'):
            group = get_default_group(chat_id)
            link = group.link
            answer = get_schedule(link, today)
            bot.send_message(call.message.chat.id, answer, parse_mode='HTML', reply_markup=home_keyboard)
        elif call.data.startswith('tomorrow'):
            group = get_default_group(chat_id)
            link = group.link
            answer = get_schedule(link, tomorrow)
            bot.send_message(call.message.chat.id, answer, parse_mode='HTML', reply_markup=home_keyboard)

        # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # elif call.data.startswith('today'):
        #     group = get_default_group(chat_id)
        #     link = group.link
        #     answer = get_schedule(link, today)
        #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
        #                           text=answer, parse_mode='HTML', reply_markup=home_keyboard)

    except Exception as e:
        bot.send_message(call.message.chat.id, str(e), reply_markup=actions_keyboard)


if __name__ == '__main__':
    while True:
        try:  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            bot.polling(True)
        # except requests.exceptions.ReadTimeout as e:
        except Exception as e:

            print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ", e)
            print("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
